//
// Generated file, do not edit! Created by opp_msgc 4.3 from messages.msg.
//

#ifndef _MESSAGES_M_H_
#define _MESSAGES_M_H_

#include <omnetpp.h>

// opp_msgc version check
#define MSGC_VERSION 0x0403
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgc: 'make clean' should help.
#endif



/**
 * Class generated from <tt>messages.msg</tt> by opp_msgc.
 * <pre>
 * message Control_msg
 * {
 *     int CurrentXpos;
 *     int CurrentYpos;
 *     int SRVindex;
 *     bool isBreaking;
 *     bool isCrashed;
 *     bool isCrazy;
 *     int RelocateToX;
 *     int RelocateToY;
 * }
 * </pre>
 */
class Control_msg : public ::cMessage
{
  protected:
    int CurrentXpos_var;
    int CurrentYpos_var;
    int SRVindex_var;
    bool isBreaking_var;
    bool isCrashed_var;
    bool isCrazy_var;
    int RelocateToX_var;
    int RelocateToY_var;

  private:
    void copy(const Control_msg& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const Control_msg&);

  public:
    Control_msg(const char *name=NULL, int kind=0);
    Control_msg(const Control_msg& other);
    virtual ~Control_msg();
    Control_msg& operator=(const Control_msg& other);
    virtual Control_msg *dup() const {return new Control_msg(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual int getCurrentXpos() const;
    virtual void setCurrentXpos(int CurrentXpos);
    virtual int getCurrentYpos() const;
    virtual void setCurrentYpos(int CurrentYpos);
    virtual int getSRVindex() const;
    virtual void setSRVindex(int SRVindex);
    virtual bool getIsBreaking() const;
    virtual void setIsBreaking(bool isBreaking);
    virtual bool getIsCrashed() const;
    virtual void setIsCrashed(bool isCrashed);
    virtual bool getIsCrazy() const;
    virtual void setIsCrazy(bool isCrazy);
    virtual int getRelocateToX() const;
    virtual void setRelocateToX(int RelocateToX);
    virtual int getRelocateToY() const;
    virtual void setRelocateToY(int RelocateToY);
};

inline void doPacking(cCommBuffer *b, Control_msg& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, Control_msg& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>messages.msg</tt> by opp_msgc.
 * <pre>
 * message WiMAX_SelfMsg
 * {	
 *     bool isTimeOut;
 *     bool isFLOOD; 
 *     int QueueIndex;
 *     int Call_ID;
 *     bool isFinishedFlooding;
 * }
 * </pre>
 */
class WiMAX_SelfMsg : public ::cMessage
{
  protected:
    bool isTimeOut_var;
    bool isFLOOD_var;
    int QueueIndex_var;
    int Call_ID_var;
    bool isFinishedFlooding_var;

  private:
    void copy(const WiMAX_SelfMsg& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const WiMAX_SelfMsg&);

  public:
    WiMAX_SelfMsg(const char *name=NULL, int kind=0);
    WiMAX_SelfMsg(const WiMAX_SelfMsg& other);
    virtual ~WiMAX_SelfMsg();
    WiMAX_SelfMsg& operator=(const WiMAX_SelfMsg& other);
    virtual WiMAX_SelfMsg *dup() const {return new WiMAX_SelfMsg(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual bool getIsTimeOut() const;
    virtual void setIsTimeOut(bool isTimeOut);
    virtual bool getIsFLOOD() const;
    virtual void setIsFLOOD(bool isFLOOD);
    virtual int getQueueIndex() const;
    virtual void setQueueIndex(int QueueIndex);
    virtual int getCall_ID() const;
    virtual void setCall_ID(int Call_ID);
    virtual bool getIsFinishedFlooding() const;
    virtual void setIsFinishedFlooding(bool isFinishedFlooding);
};

inline void doPacking(cCommBuffer *b, WiMAX_SelfMsg& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, WiMAX_SelfMsg& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>messages.msg</tt> by opp_msgc.
 * <pre>
 * message InitMsg
 * {
 *  string SourceName;
 *  int SrcXPos;
 *  int SrcYPos;
 * }
 * </pre>
 */
class InitMsg : public ::cMessage
{
  protected:
    opp_string SourceName_var;
    int SrcXPos_var;
    int SrcYPos_var;

  private:
    void copy(const InitMsg& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const InitMsg&);

  public:
    InitMsg(const char *name=NULL, int kind=0);
    InitMsg(const InitMsg& other);
    virtual ~InitMsg();
    InitMsg& operator=(const InitMsg& other);
    virtual InitMsg *dup() const {return new InitMsg(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual const char * getSourceName() const;
    virtual void setSourceName(const char * SourceName);
    virtual int getSrcXPos() const;
    virtual void setSrcXPos(int SrcXPos);
    virtual int getSrcYPos() const;
    virtual void setSrcYPos(int SrcYPos);
};

inline void doPacking(cCommBuffer *b, InitMsg& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, InitMsg& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>messages.msg</tt> by opp_msgc.
 * <pre>
 * packet SIP 
 * {
 *     string command;
 *     string src;
 *     string dst;
 *     int HandlingSRVindex;
 *     int Xpos;
 *     int Ypos;
 *     int Call_ID;
 * }
 * </pre>
 */
class SIP : public ::cPacket
{
  protected:
    opp_string command_var;
    opp_string src_var;
    opp_string dst_var;
    int HandlingSRVindex_var;
    int Xpos_var;
    int Ypos_var;
    int Call_ID_var;

  private:
    void copy(const SIP& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const SIP&);

  public:
    SIP(const char *name=NULL, int kind=0);
    SIP(const SIP& other);
    virtual ~SIP();
    SIP& operator=(const SIP& other);
    virtual SIP *dup() const {return new SIP(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual const char * getCommand() const;
    virtual void setCommand(const char * command);
    virtual const char * getSrc() const;
    virtual void setSrc(const char * src);
    virtual const char * getDst() const;
    virtual void setDst(const char * dst);
    virtual int getHandlingSRVindex() const;
    virtual void setHandlingSRVindex(int HandlingSRVindex);
    virtual int getXpos() const;
    virtual void setXpos(int Xpos);
    virtual int getYpos() const;
    virtual void setYpos(int Ypos);
    virtual int getCall_ID() const;
    virtual void setCall_ID(int Call_ID);
};

inline void doPacking(cCommBuffer *b, SIP& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, SIP& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>messages.msg</tt> by opp_msgc.
 * <pre>
 * packet SIP_Self_msg
 * {
 *     bool isTimeForHello;
 *     bool isTimeToRelocate;
 * }
 * </pre>
 */
class SIP_Self_msg : public ::cPacket
{
  protected:
    bool isTimeForHello_var;
    bool isTimeToRelocate_var;

  private:
    void copy(const SIP_Self_msg& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const SIP_Self_msg&);

  public:
    SIP_Self_msg(const char *name=NULL, int kind=0);
    SIP_Self_msg(const SIP_Self_msg& other);
    virtual ~SIP_Self_msg();
    SIP_Self_msg& operator=(const SIP_Self_msg& other);
    virtual SIP_Self_msg *dup() const {return new SIP_Self_msg(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual bool getIsTimeForHello() const;
    virtual void setIsTimeForHello(bool isTimeForHello);
    virtual bool getIsTimeToRelocate() const;
    virtual void setIsTimeToRelocate(bool isTimeToRelocate);
};

inline void doPacking(cCommBuffer *b, SIP_Self_msg& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, SIP_Self_msg& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>messages.msg</tt> by opp_msgc.
 * <pre>
 * packet Wimax_Frame
 * {
 *     bool isFLOOD;
 *     bool isCorrupted;
 *     bool isACK;
 *     int Call_ID;
 *     int Xpos;
 *     int Ypos;
 *     string src;
 *     string dst;
 *     
 * }
 * </pre>
 */
class Wimax_Frame : public ::cPacket
{
  protected:
    bool isFLOOD_var;
    bool isCorrupted_var;
    bool isACK_var;
    int Call_ID_var;
    int Xpos_var;
    int Ypos_var;
    opp_string src_var;
    opp_string dst_var;

  private:
    void copy(const Wimax_Frame& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const Wimax_Frame&);

  public:
    Wimax_Frame(const char *name=NULL, int kind=0);
    Wimax_Frame(const Wimax_Frame& other);
    virtual ~Wimax_Frame();
    Wimax_Frame& operator=(const Wimax_Frame& other);
    virtual Wimax_Frame *dup() const {return new Wimax_Frame(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual bool getIsFLOOD() const;
    virtual void setIsFLOOD(bool isFLOOD);
    virtual bool getIsCorrupted() const;
    virtual void setIsCorrupted(bool isCorrupted);
    virtual bool getIsACK() const;
    virtual void setIsACK(bool isACK);
    virtual int getCall_ID() const;
    virtual void setCall_ID(int Call_ID);
    virtual int getXpos() const;
    virtual void setXpos(int Xpos);
    virtual int getYpos() const;
    virtual void setYpos(int Ypos);
    virtual const char * getSrc() const;
    virtual void setSrc(const char * src);
    virtual const char * getDst() const;
    virtual void setDst(const char * dst);
};

inline void doPacking(cCommBuffer *b, Wimax_Frame& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, Wimax_Frame& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>messages.msg</tt> by opp_msgc.
 * <pre>
 * packet Eth_Frame
 * {
 *     string command;
 *     int Call_ID;
 *     int Xpos;
 *     int Ypos;
 *     string src;
 *     string dst;
 * }
 * </pre>
 */
class Eth_Frame : public ::cPacket
{
  protected:
    opp_string command_var;
    int Call_ID_var;
    int Xpos_var;
    int Ypos_var;
    opp_string src_var;
    opp_string dst_var;

  private:
    void copy(const Eth_Frame& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const Eth_Frame&);

  public:
    Eth_Frame(const char *name=NULL, int kind=0);
    Eth_Frame(const Eth_Frame& other);
    virtual ~Eth_Frame();
    Eth_Frame& operator=(const Eth_Frame& other);
    virtual Eth_Frame *dup() const {return new Eth_Frame(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual const char * getCommand() const;
    virtual void setCommand(const char * command);
    virtual int getCall_ID() const;
    virtual void setCall_ID(int Call_ID);
    virtual int getXpos() const;
    virtual void setXpos(int Xpos);
    virtual int getYpos() const;
    virtual void setYpos(int Ypos);
    virtual const char * getSrc() const;
    virtual void setSrc(const char * src);
    virtual const char * getDst() const;
    virtual void setDst(const char * dst);
};

inline void doPacking(cCommBuffer *b, Eth_Frame& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, Eth_Frame& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>messages.msg</tt> by opp_msgc.
 * <pre>
 * packet UDP_IP_Packet
 * {
 *     string command;
 *     string src;
 *     string dst;
 *     int Call_ID;
 *     int Xpos;
 *     int Ypos;
 *     int HandlingSRVindex;
 * }
 * </pre>
 */
class UDP_IP_Packet : public ::cPacket
{
  protected:
    opp_string command_var;
    opp_string src_var;
    opp_string dst_var;
    int Call_ID_var;
    int Xpos_var;
    int Ypos_var;
    int HandlingSRVindex_var;

  private:
    void copy(const UDP_IP_Packet& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const UDP_IP_Packet&);

  public:
    UDP_IP_Packet(const char *name=NULL, int kind=0);
    UDP_IP_Packet(const UDP_IP_Packet& other);
    virtual ~UDP_IP_Packet();
    UDP_IP_Packet& operator=(const UDP_IP_Packet& other);
    virtual UDP_IP_Packet *dup() const {return new UDP_IP_Packet(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual const char * getCommand() const;
    virtual void setCommand(const char * command);
    virtual const char * getSrc() const;
    virtual void setSrc(const char * src);
    virtual const char * getDst() const;
    virtual void setDst(const char * dst);
    virtual int getCall_ID() const;
    virtual void setCall_ID(int Call_ID);
    virtual int getXpos() const;
    virtual void setXpos(int Xpos);
    virtual int getYpos() const;
    virtual void setYpos(int Ypos);
    virtual int getHandlingSRVindex() const;
    virtual void setHandlingSRVindex(int HandlingSRVindex);
};

inline void doPacking(cCommBuffer *b, UDP_IP_Packet& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, UDP_IP_Packet& obj) {obj.parsimUnpack(b);}


#endif // _MESSAGES_M_H_
